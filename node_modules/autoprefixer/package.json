{
  "name": "autoprefixer",
  "version": "0.6.20130730",
  "description": "Parse CSS and add vendor prefixes to CSS rules using values from the Can I Use website",
  "keywords": [
    "css",
    "prefix",
    "rework"
  ],
  "author": {
    "name": "Andrey Sitnik",
    "email": "andrey@sitnik.ru"
  },
  "license": "LGPL 3",
  "repository": {
    "type": "git",
    "url": "https://github.com/ai/autoprefixer.git"
  },
  "dependencies": {
    "css-parse": "~> 1.5.2",
    "css-stringify": "~> 1.3.1"
  },
  "devDependencies": {
    "coffee-script": "1.6.3",
    "component": "0.17.0",
    "fs-extra": "0.6.3",
    "should": "1.2.2",
    "stylus": "0.35.0",
    "rework": "0.17.3",
    "mocha": "1.12.0",
    "glob": "3.2.6",
    "nib": "0.9.2"
  },
  "bin": {
    "autoprefixer": "./bin/autoprefixer"
  },
  "main": "lib/autoprefixer",
  "scripts": {
    "test": "mocha --reporter spec --require should --compilers coffee:coffee-script"
  },
  "readme": "# Autoprefixer\n\n<img align=\"right\" width=\"94\" src=\"http://ai.github.io/autoprefixer/logo.svg\">\n\nParse CSS and add vendor prefixes to CSS rules using values\nfrom the [Can I Use](http://caniuse.com/).\n\nWrite your CSS rules without vendor prefixes (in fact, forget about them\nentirely):\n\n```js\nvar css = 'a { transition: transform 1s }';\nvar prefixed = autoprefixer.compile(css);\n```\n\nAutoprefixer uses a database with current browser popularity\nand properties support to apply prefixes for you:\n\n```css\na {\n  -webkit-transition: -webkit-transform 1s;\n  transition: -ms-transform 1s;\n  transition: transform 1s\n}\n```\n\nTwitter account for news and releases:\n[@autoprefixer](https://twitter.com/autoprefixer).\n\nSponsored by [Evil Martians](http://evilmartians.com/).\n\n## Translations\n\nДокументация на русском: [habrahabr.ru/company/evilmartians/blog/176909](http://habrahabr.ru/company/evilmartians/blog/176909/)\n\n## Features\n\n### Forget about prefixes\n\nBest tool, is a tool, that you can’t see, but it’s work.\nThis is a main idea behind Autoprefixer.\n\nSo Autoprefixer interface is simple: just forget about vendor prefixes\nand write normal CSS by latest W3C specs. You don’t need\nspecial language (like Sass) and special mixins.\n\nBecause Autoprefixer is postprocessor and doesn’t depend on styles language,\nyou can also use it with Sass, Stylus or LESS preprocessors.\n\n### Actual data from Can I Use\n\nAutoprefixer uses latest database from [Can I Use](http://caniuse.com/),\nunderstands what browsers is actual and popular and adds only necessary\nvendor prefixes.\n\nAlso it cleans your CSS from old prefixes (like unnecessary `border-radius`\nfrom a lot of CSS libraries):\n\n```css\na {\n  -webkit-border-radius: 5px;\n  border-radius: 5px\n}\n```\n\ncompiles to:\n\n```css\na {\n  border-radius: 5px\n}\n```\n\n### Fast\n\nAutoprefixer is about 50 times faster than Compass and 10 times faster\nthan Stylus.\n\nOn Core i7, 10 GB RAM and SSD, benchmark with GitHub styles is:\n\n```\n~/Dev/autoprefixer$ ./node_modules/.bin/cake bench\nLoad GitHub styles\nAutoprefixer: 257 ms\nCompass:      13626 ms (53.0 times slower)\nRework:       213 ms   (1.2 times faster)\nStylus:       2596 ms  (10.1 times slower)\n```\n\nInstead of -prefix-free Autoprefixer compile CSS once on deploy,\nso it is better for client performance.\n\n### Rewrite syntax\n\nFlexbox or gradients have different syntaxes in different browsers\n(sometimes you need to recalculate angles, sometimes you need 2 old properties\ninstead of new one), but Autoprefixer hides this from you.\n\nJust write code by latest W3C specs and Autoprefixer write code\nfor old browsers:\n\n```css\na {\n  display: flex;\n}\n```\n\ncompiles to:\n\n```css\na {\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -moz-box;\n  display: -ms-flexbox;\n  display: flex\n}\n```\n\n## Browsers\n\nYou can specify browsers for your project (by default, it’s `last 2 versions`):\n\n```js\nautoprefixer(\"last 1 version\", \"> 1%\", \"ie 8\", \"ie 7\").compile(css);\n```\n\n* `last n versions` is last versions for each browser. Like “last 2 versions”\n  [strategy](http://support.google.com/a/bin/answer.py?answer=33864) in\n  Google.\n* `> n%` is browser versions, selected by global usage statistics.\n* `none` don’t set any browsers to clean CSS from any vendor prefixes.\n* You can also set browsers directly.\n\nBlackberry and stock Android browsers will not be used in `last n versions`.\nYou can add them by name:\n\n```js\nautoprefixer(\"last 1 version\", \"bb 10\", \"android 4\").compile(css);\n```\n\n## Inspect\n\nYou can check, what browsers is selected and what properties will be prefixes:\n\n```js\ninspect = autoprefixer(\"last 1 version\").inspect();\nconsole.log(inspect);\n```\n\n## Usage\n\n### Ruby on Rails\n\nAdd [autoprefixer-rails](https://github.com/ai/autoprefixer-rails) gem\nto `Gemfile` and write CSS in usual way:\n\n```ruby\ngem \"autoprefixer-rails\"\n```\n\n### Middleman\n\nAdd [middleman-autoprefixer](https://github.com/porada/middleman-autoprefixer) gem to `Gemfile`:\n\n```ruby\ngem \"middleman-autoprefixer\"\n```\n\nand activate the extension in your project’s `config.rb`:\n\n```ruby\nactivate :autoprefixer\n```\n\n### Ruby\n\nYou can integrate Autoprefixer into your Sprockets environment\nby `autoprefixer-rails` gem:\n\n```ruby\nAutoprefixerRails.install(sprockets_env)\n```\n\nor process CSS from plain Ruby:\n\n```ruby\nprefixed = AutoprefixerRails.compile(css)\n```\n\n### Grunt\n\nYou can use [grunt-autoprefixer](https://github.com/nDmitry/grunt-autoprefixer)\nplugin for Grunt. Install npm package and add it to Gruntfile:\n\n```js\ngrunt.loadNpmTasks('grunt-autoprefixer');\n```\n\n### Node.js\n\nUse `autoprefixer` npm package:\n\n```js\nvar autoprefixer = require('autoprefixer');\nvar prefixed     = autoprefixer.compile(css);\n```\n\n### JavaScript\n\nYou can use Autoprefixer in browser or non-node JS runtime\nwith [standalone version](https://raw.github.com/ai/autoprefixer-rails/master/vendor/autoprefixer.js).\n\n### Rework\n\nAutoprefixer can be also as [Rework](https://github.com/visionmedia/rework)\nfilter, so you can combine it with other filters:\n\n```js\nrework(css).\n    use( autoprefixer.rework(['> 1%', 'opera 12.5']) ).\n    use( rework.references() ).\n    toString();\n```\n\n### Sublime Text\n\nYou can process your styles directly in Sublime Text by\n[sublime-autoprefixer](https://github.com/sindresorhus/sublime-autoprefixer)\nplugin.\n\n\n### Others\n\nYou can use `autoprefixer` binary to process CSS files in any assets manager:\n\n```\nsudo npm install --global autoprefixer\nautoprefixer *.css\n```\n\nSee `autoprefixer -h` for help.\n",
  "readmeFilename": "README.md",
  "_id": "autoprefixer@0.6.20130730",
  "dist": {
    "shasum": "b46e3b312328b6e1fbac3ebe24bc42addffb83da"
  },
  "_from": "autoprefixer@0.x",
  "_resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-0.6.20130730.tgz"
}
